"""
Django settings for demoapi project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# BASE_DIR 项目的主应用目录
# 把apps目录下面所有的子应用设置为可以直接导包，那就需要把apps设置为默认导包路径
import sys
sys.path.insert(0, os.path.join(BASE_DIR,"apps") )

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q7&*iw2c@wt025*0&jj@m%y_t3_&xxi)t4^5%fwuha*abvlyzf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    # 想象我有域名（同时我修改了host文件的域名解析）
    "api.luffycity.cn",
    "www.luffycity.cn",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 解决跨域的插件 1
    'corsheaders', # 相当于在Response(headers={"Access-Control-Allow-Origin":"客户端地址/*"})
    'rest_framework',
    'crispy_forms',
    'reversion',

    # 自定义应用
    'home',
    'user',
]

# 解决跨域的插件 2
CORS_ORIGIN_WHITELIST = (
    # 在部分的cors_headers模块中，如果不带协议会导致客户端无法跨域需要配置"http://www.luffycity.cn:8080"
    'http://www.luffycity.cn',
)
# 解决跨域的插件 3
CORS_ALLOW_CREDENTIALS = False # 允许ajax跨域请求时携带cookie

MIDDLEWARE = [
    #解决跨域的插件 4
    # 配合跨域的中间件【放在中间件的第一个位置】
    'corsheaders.middleware.CorsMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'demoapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'demoapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
# }
"""
1 创建数据库
create database luffyjwt charset=utf8mb4;
2 为数据库创建普通用户 luffyjwt 密码为 luffy
create user luffyjwt identified by 'luffy';
3 luffy下面所有的表 授予所有的权限 【% 表示所有的主机】
grant all privileges on luffyjwt.* to 'luffyjwt'@'%';
flush privileges; 
"""

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'luffyjwt',
        'PASSWORD': 'luffy',
        'NAME': 'luffyjwt',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# 访问静态文件的url地址前缀
STATIC_URL = '/static/'
# 设置django的静态文件目录
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,"static")
]

# 项目中存储上传文件的根目录[暂时配置]，注意，uploads目录需要手动创建否则上传文件时报错
MEDIA_ROOT=os.path.join(BASE_DIR,"uploads")
# 访问上传文件的url地址前缀
MEDIA_URL ="/media/"


# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # 日志的格式
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    # 日志的过滤信息
    'filters': {
        'special': {
            # 这个special 应该怎么定义 ？？？？
            # '()': 'project.logging.SpecialFilter',
            # 'foo': 'bar',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 日志的处理方式
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['special']
        },
        "file": {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置，日志存放的目录必须手动创建
            'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/luffy.log'),
            # 日志文件的最大值，这里设置的是300M
            'maxBytes': 300 * 1024 * 1024,
            # 日志文件的数量
            'backupCount': 10,
            # 日志的格式
            'formatter': 'verbose'

        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'myproject.custom': {
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',
            'filters': ['special']
        }
    }
}

REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'demoapi.utils.exceptions.custom_exception_handler',
}

# 注册自定义用户模型，值的格式必须是： "应用名(子app的名字).模型类名"
AUTH_USER_MODEL = "user.User"
"""
建议在数据迁移前一定要配置好AUTH_USER_MODEL，要不会迁移出错，出错的调整方式：
0. 先把现有的数据库导出备份，然后清掉数据库中所有的数据表。
1. 把开发者创建的所有子应用下面的migrations目录下除了__init__.py以外的所有迁移文件，只要涉及到用户的，一律删除
2. 把django.contrib.admin.migrations目录下除了__init__.py以外的所有迁移文件，全部删除。
3. 把django.contrib.auth.migrations目录下除了__init__.py以外的所有迁移文件，全部删除。
4. 把reversion.migrations目录下除了__init__.py以外的所有迁移文件，全部删除。
5. 把xadmin.migrations目录下除了__init__.py以外的所有迁移文件，全部删除。
6. 接下来，执行数据迁移，回顾第0步中的数据，以后如果要修改用户相关数据，不需要重复本次操作，直接数据迁移即可。
"""
